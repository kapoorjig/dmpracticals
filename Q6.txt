#include<iostream>
#include<sys/types.h>
#include<sys/wait.h>
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#define BUFFER_SIZE 25
#define READ_END 0
#define WRITE_END 1
using namespace std;
int main(){
char write_msg[BUFFER_SIZE]="12345";
char read_msg[BUFFER_SIZE];
int fd[2],fd1[2];
pipe(fd),pipe(fd1);
pid_t pid;
if(pipe(fd)== -1){
cout<<"\npipe failed ";
return 1;
}
pid = fork();
if(pid<0){
cout<<"FOrk failed";
return 1;
}
if(pid>0){
close(fd[READ_END]);
cout<<"writing in parent process\n";
write(fd[WRITE_END],write_msg,4);
close(fd[WRITE_END]);
wait(NULL);
close(fd1[1]);
cout<<"check reading in parent process\n";
read(fd1[0],read_msg,5);

cout<<"message read is :\n"<<read_msg;
close(fd[0]);
}
else{
close(fd[WRITE_END]);
read(fd[READ_END],read_msg,4);
cout<<"Reading in child process \nmessage read is : "<<read_msg<<endl;
close(fd[READ_END]);
close(fd1[0]);
cout<<"check writing in child process\n";
write(fd1[1],write_msg,5);
close(fd1[1]);

}
return 0;
}
